package main

import (
	"encoding/xml"
	"fmt"
	"log/slog"
	"os"
	"path/filepath"
	"strings"

	optic3importer "github.com/angiglesias/optic3-importer"
	"github.com/spf13/pflag"
)

var (
	includeSeriesIndex bool
	includeSeriesHour  bool
	extendedNames      bool
	groupedDays        bool
	multiFile          bool
	sourceFile         string
	outputFile         string
)

func init() {
	pflag.StringVarP(&sourceFile, "input", "i", "", "Input CSV file with data to convert")
	pflag.StringVarP(&outputFile, "output", "o", "", "Output XML file with conversion")
	pflag.BoolVar(&includeSeriesIndex, "inc-index", true, "Include heat order in name")
	pflag.BoolVar(&includeSeriesHour, "inc-hour", false, "Include heat start time in HH:MM:SS in name")
	pflag.BoolVar(&extendedNames, "ext-names", true, "Extended file names")
	pflag.BoolVar(&groupedDays, "grp-days", false, "Grouped days")
	pflag.BoolVar(&multiFile, "multi-file", false, "Generate multiple files (for some group values cases)")
	pflag.Parse()
}

func main() {
	if sourceFile == "" {
		slog.Error("Missing source file to convert")
		os.Exit(1)
	}

	input, err := filepath.Abs(sourceFile)
	if err != nil {
		slog.Error("Error resolving abspath to input file", "sourceFile", sourceFile)
		os.Exit(1)
	}

	if outputFile == "" {
		outputFile = filepath.Join(filepath.Dir(input), strings.TrimSuffix(filepath.Base(input), filepath.Ext(input))+".meetxml")
		slog.Info("Using autogenerated output file", "output", outputFile)
	}

	src, err := os.OpenFile(input, os.O_RDONLY, 0644)
	if err != nil {
		slog.Error("Error opening source file", "src", input, "error", err)
		os.Exit(1)
	}
	defer src.Close()

	cvtConfig := optic3importer.Config{
		IncludeIndexInHeatName: includeSeriesIndex,
		IncludeHourInHeatName:  includeSeriesHour,
		ExtendedHeatName:       extendedNames,
		GroupDays:              optic3importer.None,
	}

	if groupedDays {
		if multiFile {
			cvtConfig.GroupDays = optic3importer.MultiFile
		} else {
			cvtConfig.GroupDays = optic3importer.SingleFile
		}

	}

	cvt := optic3importer.NewMantisConverter(cvtConfig)

	meets, err := cvt.Parse(src)
	if err != nil {
		slog.Error("Error parsing Mantis CSV file", "source", src.Name())
		os.Exit(1)
	}

	for i, meet := range meets {
		outpath := outputFile

		if len(meets) > 1 {
			outpath = filepath.Join(filepath.Dir(outpath), strings.TrimSuffix(filepath.Base(outpath), filepath.Ext(outpath))+fmt.Sprintf("-%d", i)+filepath.Ext(outpath))
		}
		out, err := os.OpenFile(outpath, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)
		if err != nil {
			slog.Error("Error opening output file", "out", outpath, "error", err)
			os.Exit(1)
		}
		defer out.Close()

		xmlEnc := xml.NewEncoder(out)
		defer xmlEnc.Close()

		err = xmlEnc.Encode(meet)
		if err != nil {
			slog.Error("Error encoding output xml file", "output", out.Name())
			os.Exit(1)
		}

		slog.Info("Converted successfully file", "src", input, "out", outpath, "grpDays", groupedDays, "multiFile", multiFile, "extNames", extendedNames)
	}

}
